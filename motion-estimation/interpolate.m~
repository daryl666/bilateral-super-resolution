function res = interpolate(iC, iA)

rows = size(iC, 1);
cols = size(iC, 2);
res = zeros(rows * 2 - 1, cols * 2 - 1, 3);

% 基准图像的像素点
for i = 1 : 2 : 2 * rows - 1
    for j = 1 : 2 : 2 * cols - 1
        res(i, j, :) = [iC(floor(i / 2) + 1, floor(j / 2) + 1)];
    end
end

% 需要插值的像素
% 对于每个待插值像素需要考虑其周围的八个像素
for i = 1 : 2 * rows - 1
    if mod(i, 2) == 1
        start = 2;
        step = 2;
    else
        start = 1;
        step = 1;
    end
    
    for j = start : step : 2 * cols - 1
        
%         leftUpLow----upLow----rightUpLow
%           |        |       |
%           |        |       |
%          leftLow ----cur----rightLow
%           |        |       |
%           |        |       |
%        leftDownLow---downLow---rightDownLow

%     低分辨率图中有效像素的条件
%     1. 在界内
%     2. x和y为奇数
        if i - 1 > 0 && j - 1 > 0 && mod(i - 1, 2) && mod(j - 1, 2)
            leftUpLow = squeeze(iA(floor((i - 1) / 2) + 1, floor((j - 1) / 2) + 1, :, :));
        end
        
        if i - 1 > 0 && j + 1 <= 2 * cols - 1 && mod(i - 1, 2) && mod(j + 1, 2)
            rightUpLow = squeeze(iA(floor((i - 1) / 2) + 1, floor((j + 1) / 2) + 1, :, :));
        end
        
        if i + 1 <= 2 * rows - 1 && j - 1 > 0 && mod(i + 1, 2) && mod(j - 1, 2) 
            leftDownLow = squeeze(iA(floor((i + 1) / 2) + 1, floor((j - 1) / 2) + 1, :, :));
        end     
        
        if i + 1 <= 2 * rows - 1 && j + 1 <= 2 * cols - 1 ...
                && mod(i + 1, 2) && mod(j + 1, 2)
            rightDownLow = squeeze(iA(floor((i + 1) / 2) + 1, floor((j + 1) / 2) + 1, :, :));
        end
        
        if j - 1 > 0 && mod(i, 2) && mod(j - 1, 2)
            leftLow = squeeze(iA(floor(i / 2) + 1, floor((j - 1) / 2) + 1, :, :));
        end
        
        if j + 1 > 0 && mod(i, 2) && mod(j + 1, 2)
            rightLow = squeeze(iA(floor(i / 2) + 1, floor((j + 1) / 2) + 1, :, :));
        end
        
        if i - 1 > 0 && mod(i - 1, 2) && mod(j, 2)
            upLow = squeeze(iA(floor((i - 1) / 2) + 1, floor(j / 2) + 1, :, :));
        end
        
        if i + 1 > 0 && mod(i + 1, 2) && mod(j, 2)
            downLow = squeeze(iA(floor((i + 1) / 2) + 1, floor(j / 2) + 1, :, :));
        end
        
        
      
        
%         选择距离当前像素最近的像素做插值
        temp = cell(5);
        tempDist = intmax;
        if exist('leftUpLow', 'var')
            for ii = 1 : leftUpLow{1, 1}
                if (leftUpLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (leftUpLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = leftUpLow(ii + 1, :);
                    tempDist = (leftUpLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (leftUpLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
        end
        
        if exist('leftDownLow', 'var')
            for ii = 1 : leftDownLow{1, 1}
                if (leftDownLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (leftDownLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = leftDownLow(ii + 1, :);
                    tempDist = (leftDownLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (leftDownLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
        end
        
        if exist('rightUpLow', 'var')
            for ii = 1 : rightUpLow{1, 1}
                if (rightUpLow{ii + 1, 1} * 2 - 1 - i) ^ 2 + (rightUpLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = rightUpLow(ii + 1, :);
                    tempDist = (rightUpLow{ii + 1, 1} * 2 - 1 - i) ^ 2 + (rightUpLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
        end
        
        if exist('rightDownLow', 'var')
            for ii = 1 : rightDownLow{1, 1}
                if (rightDownLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (rightDownLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = rightDownLow(ii + 1, :);
                    tempDist = (rightDownLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (rightDownLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
        end
        
        
        if exist('leftLow', 'var')
            for ii = 1 : leftLow{1, 1}
                if (leftLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (leftLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = leftLow(ii + 1, :);
                    tempDist = (leftLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (leftLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
        end
        
        if exist('rightLow', 'var')
            for ii = 1 : rightLow{1, 1}
                if (rightLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (rightLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = rightLow(ii + 1, :);
                    tempDist = (rightLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (rightLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
        end
        
        if exist('upLow', 'var')
            for ii = 1 : upLow{1, 1}
                if (upLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (upLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = upLow(ii + 1, :);
                    tempDist = (upLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (upLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
        end
        
         if exist('downLow', 'var')
            for ii = 1 : downLow{1, 1}
                if (downLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (downLow{ii + 1, 2} * 2 - 1 - j) ^ 2 < tempDist
                    temp = downLow(ii + 1, :);
                    tempDist = (downLow{ii + 1, 1} * 2 - 1 - i) ^ 2 ...
                        + (downLow{ii + 1, 2} * 2 - 1 - j) ^ 2;
                end
            end
         end
         
%          leftUpHigh
         if mod(i - 1, 2) && mod(j - 1, 2)
             if 2 < tempDist
                 temp = iC(i - 1, j - 1, :);
                 tempDist = 2;
             end
         end
%          leftHigh
         if mod(i, 2) && mod(j - 1, 2)
             if 2 < tempDist
                 temp = iC(i, j - 1, :);
                 tempDist = 2;
             end
         end
%          leftDownHigh
         if mod(i + 1, 2) && mod(j - 1, 2)
             if 2 < tempDist
                 temp = iC(i + 1, j - 1, :);
                 tempDist = 2;
             end
         end
%          upHigh
            if mod(i + 1, 2) && mod(j - 1, 2)
                if 2 < tempDist
                    temp = iC(i + 1, j - 1, :);
                    tempDist = 2;
                end
            end
        
        res(i, j, 1 : 3) = cell2mat(temp(1, 3 : 5));
        
      
    end
end







